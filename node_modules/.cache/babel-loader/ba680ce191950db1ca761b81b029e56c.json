{"ast":null,"code":"var _jsxFileName = \"/Users/fadytito/Frontend Development/React Nanodegree/WouldYouRather/src/components/QuestionPreview.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport UserInfo from \"./UserInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionPreview = props => {\n  const {\n    name,\n    avatarURL\n  } = props.author;\n  const {\n    optionOne,\n    optionTwo,\n    qid,\n    isAnswered\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-preview\",\n    children: [/*#__PURE__*/_jsxDEV(UserInfo, {\n      name: name,\n      avatarURL: avatarURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), \"Would you rather...\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [optionOne, \" or \", optionTwo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: `/Question/${qid}`,\n        state: {\n          qid,\n          isAnswered\n        }\n      },\n      children: \"view poll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = QuestionPreview;\n\nfunction mapStateToProps({\n  questions,\n  users\n}, {\n  qid\n}) {\n  return {\n    author: users[questions[qid].author],\n    optionOne: questions[qid].optionOne.text,\n    optionTwo: questions[qid].optionTwo.text\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionPreview);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPreview\");","map":{"version":3,"sources":["/Users/fadytito/Frontend Development/React Nanodegree/WouldYouRather/src/components/QuestionPreview.js"],"names":["React","connect","Link","UserInfo","QuestionPreview","props","name","avatarURL","author","optionOne","optionTwo","qid","isAnswered","pathname","state","mapStateToProps","questions","users","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAsBF,KAAK,CAACG,MAAlC;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,GAAxB;AAA6BC,IAAAA;AAA7B,MAA4CP,KAAlD;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEC,IAAhB;AAAsB,MAAA,SAAS,EAAEC;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,sCAGE;AAAA,iBACGE,SADH,UACkBC,SADlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME,QAAC,IAAD;AACE,MAAA,EAAE,EAAE;AACFG,QAAAA,QAAQ,EAAG,aAAYF,GAAI,EADzB;AAEFG,QAAAA,KAAK,EAAE;AACLH,UAAAA,GADK;AAELC,UAAAA;AAFK;AAFL,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAvBD;;KAAMR,e;;AAyBN,SAASW,eAAT,CAAyB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAzB,EAA+C;AAAEN,EAAAA;AAAF,CAA/C,EAAwD;AACtD,SAAO;AACLH,IAAAA,MAAM,EAAES,KAAK,CAACD,SAAS,CAACL,GAAD,CAAT,CAAeH,MAAhB,CADR;AAELC,IAAAA,SAAS,EAAEO,SAAS,CAACL,GAAD,CAAT,CAAeF,SAAf,CAAyBS,IAF/B;AAGLR,IAAAA,SAAS,EAAEM,SAAS,CAACL,GAAD,CAAT,CAAeD,SAAf,CAAyBQ;AAH/B,GAAP;AAKD;;AACD,eAAejB,OAAO,CAACc,eAAD,CAAP,CAAyBX,eAAzB,CAAf","sourcesContent":["import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport UserInfo from \"./UserInfo\";\n\nconst QuestionPreview = (props) => {\n  const { name, avatarURL } = props.author;\n  const { optionOne, optionTwo, qid, isAnswered } = props;\n  return (\n    <div className=\"question-preview\">\n      <UserInfo name={name} avatarURL={avatarURL} />\n      Would you rather...\n      <p>\n        {optionOne} or {optionTwo}\n      </p>\n      <Link\n        to={{\n          pathname: `/Question/${qid}`,\n          state: {\n            qid,\n            isAnswered,\n          },\n        }}\n      >\n        view poll\n      </Link>\n    </div>\n  );\n};\n\nfunction mapStateToProps({ questions, users }, { qid }) {\n  return {\n    author: users[questions[qid].author],\n    optionOne: questions[qid].optionOne.text,\n    optionTwo: questions[qid].optionTwo.text,\n  };\n}\nexport default connect(mapStateToProps)(QuestionPreview);\n"]},"metadata":{},"sourceType":"module"}